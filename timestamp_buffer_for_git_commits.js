/**
 * TLDR; I wrote hacky code to parse those dates and find delays based on a 1.5h cycle time. The result is that for those 250 commit dates, it might have taken an extra 95h of time if you required PR branches to be up to date.
 * ---------------
 * if my hacky JS isnâ€™t too error prone, from those 250 commits, and a 1.5h cycle time, that would result in a 740h difference if we required up to date branches
 *
 * If you ignore any commits that are within 10 seconds of each other (assuming CI commits?), then that changes the resulting diff in time to be ~95h instead of 740h (and this sounds more accurate)
 */

let times = [
  "2022-09-09T13:05:41Z",
  "2022-09-08T10:12:41Z",
  "2022-09-06T14:56:07Z",
  "2022-09-01T21:18:42Z",
  "2022-09-01T21:18:39Z",
  "2022-08-31T12:44:14Z",
  "2022-08-25T18:50:59Z",
  "2022-08-25T18:44:42Z",
  "2022-08-25T18:17:18Z",
  "2022-08-25T17:51:57Z",
  "2022-08-25T17:10:57Z",
  "2022-08-25T16:01:54Z",
  "2022-08-25T15:50:34Z",
  "2022-08-25T10:05:59Z",
  "2022-08-18T21:20:39Z",
  "2022-08-18T21:20:37Z",
  "2022-08-18T17:35:56Z",
  "2022-08-18T12:58:38Z",
  "2022-08-18T12:56:14Z",
  "2022-08-16T22:33:44Z",
  "2022-08-16T21:25:31Z",
  "2022-08-16T21:17:14Z",
  "2022-08-16T20:23:23Z",
  "2022-08-16T20:01:18Z",
  "2022-08-16T18:47:17Z",
  "2022-08-16T17:51:20Z",
  "2022-08-16T15:54:40Z",
  "2022-08-16T15:39:40Z",
  "2022-08-16T02:04:33Z",
  "2022-08-15T18:21:15Z",
  "2022-08-15T15:03:48Z",
  "2022-08-13T00:48:31Z",
  "2022-08-12T23:19:50Z",
  "2022-08-12T22:41:09Z",
  "2022-08-12T19:23:56Z",
  "2022-08-12T18:45:53Z",
  "2022-08-12T18:42:56Z",
  "2022-08-12T17:18:19Z",
  "2022-08-12T16:40:41Z",
  "2022-08-12T16:39:50Z",
  "2022-08-12T16:03:47Z",
  "2022-08-12T15:39:14Z",
  "2022-08-12T15:38:30Z",
  "2022-08-12T15:18:18Z",
  "2022-08-12T15:11:02Z",
  "2022-08-12T10:34:24Z",
  "2022-08-11T23:35:26Z",
  "2022-08-11T19:25:21Z",
  "2022-08-11T18:47:09Z",
  "2022-08-11T18:46:13Z",
  "2022-08-11T18:41:00Z",
  "2022-08-11T18:37:17Z",
  "2022-08-11T18:19:30Z",
  "2022-08-11T16:47:18Z",
  "2022-08-11T16:11:00Z",
  "2022-08-10T15:11:31Z",
  "2022-08-09T16:31:53Z",
  "2022-08-08T13:00:13Z",
  "2022-08-05T18:30:40Z",
  "2022-08-05T18:30:21Z",
  "2022-08-05T08:51:26Z",
  "2022-08-04T22:00:24Z",
  "2022-08-04T16:21:59Z",
  "2022-08-04T15:54:05Z",
  "2022-08-04T15:27:28Z",
  "2022-08-02T23:46:20Z",
  "2022-08-02T23:32:42Z",
  "2022-08-01T18:01:48Z",
  "2022-08-01T17:51:35Z",
  "2022-08-01T16:14:29Z",
  "2022-08-01T14:51:18Z",
  "2022-07-29T13:38:05Z",
  "2022-07-28T19:58:35Z",
  "2022-07-28T17:59:44Z",
  "2022-07-28T17:50:53Z",
  "2022-07-28T16:07:56Z",
  "2022-07-28T15:39:32Z",
  "2022-07-28T15:13:03Z",
  "2022-07-28T15:04:15Z",
  "2022-07-28T14:51:26Z",
  "2022-07-28T14:49:01Z",
  "2022-07-28T14:48:49Z",
  "2022-07-28T14:42:19Z",
  "2022-07-28T14:32:42Z",
  "2022-07-28T13:44:55Z",
  "2022-07-28T13:30:14Z",
  "2022-07-28T11:14:02Z",
  "2022-07-27T15:13:59Z",
  "2022-07-27T13:45:35Z",
  "2022-07-27T11:45:13Z",
  "2022-07-27T00:32:19Z",
  "2022-07-27T00:30:06Z",
  "2022-07-27T00:29:50Z",
  "2022-07-26T19:31:08Z",
  "2022-07-26T15:51:13Z",
  "2022-07-26T15:51:11Z",
  "2022-07-26T14:58:55Z",
  "2022-07-26T14:23:12Z",
  "2022-07-26T13:49:09Z",
  "2022-07-26T13:43:14Z",
  "2022-07-26T09:20:42Z",
  "2022-07-25T19:46:47Z",
  "2022-07-25T15:32:25Z",
  "2022-07-25T15:32:19Z",
  "2022-07-25T14:50:36Z",
  "2022-07-25T14:50:17Z",
  "2022-07-25T14:49:25Z",
  "2022-07-25T13:09:53Z",
  "2022-07-25T11:05:56Z",
  "2022-07-21T13:03:09Z",
  "2022-07-19T20:21:05Z",
  "2022-07-19T20:19:48Z",
  "2022-07-15T21:26:07Z",
  "2022-07-15T20:37:38Z",
  "2022-07-15T20:37:30Z",
  "2022-07-15T20:34:04Z",
  "2022-07-15T20:33:43Z",
  "2022-07-15T16:25:27Z",
  "2022-07-15T16:11:01Z",
  "2022-07-15T15:28:18Z",
  "2022-07-15T15:22:33Z",
  "2022-07-15T14:38:18Z",
  "2022-07-15T14:36:09Z",
  "2022-07-15T14:36:00Z",
  "2022-07-15T13:50:32Z",
  "2022-07-15T13:40:45Z",
  "2022-07-15T13:37:53Z",
  "2022-07-15T13:37:24Z",
  "2022-07-15T12:23:02Z",
  "2022-07-15T12:22:22Z",
  "2022-07-15T12:05:37Z",
  "2022-07-15T10:15:03Z",
  "2022-07-14T17:23:05Z",
  "2022-07-14T14:03:03Z",
  "2022-07-14T12:45:06Z",
  "2022-07-14T12:40:14Z",
  "2022-07-13T20:05:52Z",
  "2022-07-13T19:57:23Z",
  "2022-07-13T19:52:37Z",
  "2022-07-13T19:32:41Z",
  "2022-07-13T19:26:22Z",
  "2022-07-13T18:08:25Z",
  "2022-07-13T17:22:25Z",
  "2022-07-13T15:41:15Z",
  "2022-07-13T11:13:07Z",
  "2022-07-12T19:35:09Z",
  "2022-07-12T19:00:03Z",
  "2022-07-12T18:56:23Z",
  "2022-07-12T18:36:57Z",
  "2022-07-12T14:18:01Z",
  "2022-07-11T13:06:23Z",
  "2022-07-11T12:32:03Z",
  "2022-07-11T11:40:45Z",
  "2022-07-07T21:08:28Z",
  "2022-07-07T21:08:26Z",
  "2022-07-07T18:18:38Z",
  "2022-07-07T17:20:30Z",
  "2022-07-07T14:34:33Z",
  "2022-07-07T12:55:23Z",
  "2022-07-06T17:14:23Z",
  "2022-07-06T17:14:01Z",
  "2022-07-06T16:52:52Z",
  "2022-07-06T16:52:47Z",
  "2022-07-06T16:52:26Z",
  "2022-07-06T16:26:33Z",
  "2022-07-06T16:26:07Z",
  "2022-07-06T13:44:08Z",
  "2022-07-06T13:41:16Z",
  "2022-07-06T13:31:22Z",
  "2022-07-01T20:24:02Z",
  "2022-07-01T17:56:11Z",
  "2022-07-01T17:46:58Z",
  "2022-07-01T17:45:04Z",
  "2022-07-01T16:52:31Z",
  "2022-07-01T16:34:57Z",
  "2022-07-01T15:56:22Z",
  "2022-07-01T14:54:54Z",
  "2022-07-01T12:21:22Z",
  "2022-06-30T22:16:28Z",
  "2022-06-30T19:41:59Z",
  "2022-06-30T15:40:13Z",
  "2022-06-30T15:20:07Z",
  "2022-06-30T13:49:30Z",
  "2022-06-30T13:30:05Z",
  "2022-06-29T18:56:49Z",
  "2022-06-28T17:56:30Z",
  "2022-06-28T16:59:20Z",
  "2022-06-28T16:58:30Z",
  "2022-06-28T16:57:40Z",
  "2022-06-28T16:42:04Z",
  "2022-06-28T16:41:08Z",
  "2022-06-27T17:52:47Z",
  "2022-06-27T14:30:40Z",
  "2022-06-27T13:45:50Z",
  "2022-06-23T21:17:47Z",
  "2022-06-23T21:17:45Z",
  "2022-06-21T18:18:21Z",
  "2022-06-21T15:36:23Z",
  "2022-06-17T20:07:46Z",
  "2022-06-17T20:01:12Z",
  "2022-06-17T18:22:44Z",
  "2022-06-17T16:43:49Z",
  "2022-06-17T16:25:53Z",
  "2022-06-17T15:27:14Z",
  "2022-06-17T14:56:47Z",
  "2022-06-17T14:55:14Z",
  "2022-06-16T18:46:15Z",
  "2022-06-16T17:35:08Z",
  "2022-06-15T13:05:11Z",
  "2022-06-15T09:42:09Z",
  "2022-06-14T19:07:11Z",
  "2022-06-14T13:58:05Z",
  "2022-06-13T21:19:45Z",
  "2022-06-13T14:26:16Z",
  "2022-06-08T21:41:33Z",
  "2022-06-08T21:41:31Z",
  "2022-06-08T18:01:02Z",
  "2022-06-08T16:55:08Z",
  "2022-06-08T16:03:58Z",
  "2022-06-08T08:13:26Z",
  "2022-06-03T18:11:02Z",
  "2022-06-03T17:59:02Z",
  "2022-06-03T15:20:52Z",
  "2022-06-03T15:07:27Z",
  "2022-06-03T14:31:44Z",
  "2022-06-03T13:06:13Z",
  "2022-06-03T12:42:04Z",
  "2022-06-03T02:35:17Z",
  "2022-06-02T16:00:59Z",
  "2022-06-02T05:41:11Z",
  "2022-06-02T05:38:05Z",
  "2022-06-01T23:47:23Z",
  "2022-06-01T21:04:36Z",
  "2022-06-01T21:04:19Z",
  "2022-06-01T20:22:28Z",
  "2022-06-01T15:58:26Z",
  "2022-06-01T12:52:03Z",
  "2022-05-31T17:00:47Z",
  "2022-05-31T16:17:54Z",
  "2022-05-31T16:03:09Z",
  "2022-05-31T14:59:47Z",
  "2022-05-26T03:23:56Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:27Z",
  "2022-05-26T03:12:26Z",
];

const updateCycleTime = 1.5*1000*60*60; // 1.5h

function getEarliestMergeDateTime(d1, d2) {
    if (!d1) {
        return {
            newMergeMs: d2,
            delayInMs: 0,
        }
    }
    if (d1 + 10*1000 > d2) { // ignore commits within 10s window, assuming they're CI commits
        return {
            newMergeMs: d2,
            delayInMs: 0,
        };
    } else if (d1 + updateCycleTime > d2) {
        return {
            newMergeMs: d1 + updateCycleTime,
            delayInMs: d1 + updateCycleTime - d2,
        };
    } else {
        return {
            newMergeMs: d2,
            delayInMs: 0,
        };
    }
}

class MergeTime {
    constructor(priorDateMs, dateTimeMs) {
      this.originalMergeTime = new Date(dateTimeMs);
      const { delayInMs, newMergeMs } = getEarliestMergeDateTime(priorDateMs, dateTimeMs);
      this.delayInMs = delayInMs;
      this.newMergeMs = newMergeMs;
      this.delayInH = delayInMs / (1000*60*60);
    }
}

const mergeTimeData = times.sort().reduce((agg, curr) => {
      const mergeObj = new MergeTime(agg.mergeTimes[agg.mergeTimes.length - 1]?.newMergeMs || null, new Date(curr).getTime());
      agg.mergeTimes.push(mergeObj);
      agg.totalTimeDiff += mergeObj.delayInMs;
      return agg;   
}, { totalTimeDiff: 0, mergeTimes: [] });

mergeTimeData.totalTimeDiffInH = mergeTimeData.totalTimeDiff / (1000*60*60);

mergeTimeData
